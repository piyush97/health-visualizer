// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Health Data Models
model HealthDataUpload {
    id          String   @id @default(cuid())
    fileName    String
    fileSize    Int
    uploadedAt  DateTime @default(now())
    processedAt DateTime?
    status      UploadStatus @default(PROCESSING)
    
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    healthRecords HealthRecord[]
    
    @@index([userId])
}

model HealthRecord {
    id        String   @id @default(cuid())
    type      String   // e.g., "HKQuantityTypeIdentifierStepCount"
    value     String   // Value as string to handle various data types
    unit      String?  // e.g., "count", "kg", "bpm"
    startDate DateTime
    endDate   DateTime
    createdAt DateTime @default(now())
    
    uploadId String
    upload   HealthDataUpload @relation(fields: [uploadId], references: [id], onDelete: Cascade)
    
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    @@index([userId, type])
    @@index([startDate])
    @@index([uploadId])
}

model ChatMessage {
    id        String      @id @default(cuid())
    content   String
    role      MessageRole
    createdAt DateTime    @default(now())
    
    userId String
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    @@index([userId, createdAt])
}

enum UploadStatus {
    PROCESSING
    COMPLETED
    FAILED
}

enum MessageRole {
    USER
    ASSISTANT
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    
    // Health data relationships
    healthDataUploads HealthDataUpload[]
    healthRecords     HealthRecord[]
    chatMessages      ChatMessage[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
